1、MongoDB快速入门
    1）NoSQL是什么？
        NoSQL，指的是非关系型的数据库，相比于sql关系型数据库来说
        NoSQL = Not Only SQL ，意即"不仅仅是SQL"
        NoSQL用于超大规模数据的存储，这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展
            今天我们可以通过第三方平台很容易的访问和抓取数据：用户的个人信息，社交网络，地理位置
            数据采集过程中，由于采集字段无法完全确定，用nosql更简单、直接
        优点
            高可扩展性
            分布式计算
            低成本
            架构的灵活性，半结构化数据
            没有复杂的关系
        缺点
            没有标准化
            有限的查询功能（到目前为止）
            最终一致是不直观的程序
        我们选择哪种Nosql数据库？
            MongoDB：文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有机会对某些字段建立索引，实现关系数据库的某些功能
    2）什么是MongoDB？
        概念
            MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案
            MongoDB是非关系数据库
        存储对象
            MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成
            MongoDB 文档类似于 JSON 对象，字段值可以包含其他文档，数组及文档数组
        特点
            MongoDB安装简单
            MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。
            你可以在MongoDB记录中设置任何属性的索引 (如：FirstName="Sameer",Address="8 Gandhi Road")来实现更快的排序
            MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言
    3) 安装
        自行Google
    4）MongoDB概念解析
    关系型数据管理系统与mongodb中概念的对应关系（RDBMS - MongoDB）
        数据库 - 数据库
        表格 - 集合
        行 - 文档
        列 - 字段
    ① 数据库：database
        概念
            一个mongodb中可以建立多个数据库。
            MongoDB的默认数据库为"db"，该数据库存储在data目录中
            MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中
        "show dbs" 命令可以显示所有数据的列表
            admin： 从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令
            也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。
            local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合
        执行 "db" 命令可以显示当前数据库对象或集合
        运行"use"命令，可以连接到一个指定的数据库
    ② 数据记录行/文档：document
    概念
        文档是一组键值(key-value)对，类似python中的字典对象，但不完全一样
    注意
        文档中的键/值对是有序的
        MongoDB区分类型和大小写
        MongoDB的文档不能有重复的键
        文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符
    示例
        {"name": "farbird", "age":18}
    ③ 数据库表/集合：collection
    概念
        集合就是 MongoDB 文档组
        集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性
    注意，集合命名问题
        集合名不能是空字符串""
        集合名不能含有\0字符（空字符)，这个字符表示集合名的结尾
        集合名不能以"system."开头，这是为系统集合保留的前缀
        用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建
        的集合，否则千万不要在名字里出现$
    ④ 数据字段/域：field
    ⑤ 索引：index
    ⑥ 主键：primary key
        MongoDB自动将_id字段设置为主键

    MongoDB数据类型
        String	字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的
        Integer 整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位
        Boolean 布尔值。用于存储布尔值（真/假）
        Double 双精度浮点值。用于存储浮点值
        Timestamp	时间戳。记录文档修改或添加的具体时间。
        Min/Max keys	将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。
        Array	用于将数组或列表或多个值存储为一个键。
        Object	用于内嵌文档。
        Null	用于创建空值。
        Symbol	符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。
        Date	日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。
        Object ID	对象 ID。用于创建文档的 ID。
        Binary Data	二进制数据。用于存储二进制数据。
        Code	代码类型。用于在文档中存储 JavaScript 代码。
        Regular expression	正则表达式类型。用于存储正则表达式。
    我们后续如何使用mongodb？
        ① python做数据采集 → 存储数据进入mongodb
        ② 通过pymongo，调用mongo数据进行分析、处理
        ③ 分析处理完毕后，可以通过python导出本地文件，或者以新的集合继续存入mongodb
        ④ 通过MongoDB可视化工具robo3t，查看数据库的数据等

2、MongoDB基本语法
    1）数据库的创建/删除
        创建数据库
            use DATABASE_NAME
                如果数据库不存在，则创建数据库，否则切换到指定数据库
        查看数据库
            查看所有数据库：show dbs
            查看现运行的数据库：db
            注意点
                数据库中必须有数据，才可以显示
                db.table02.insert(...)：这里虽然没有创建集合，但mongodb中当你插入一些文档时，MongoDB 会自动创建集合

        删除数据库
            db.dropDatabase()
            ① 切换到需要删除的数据库
            ② 执行语法：db.dropDatabase()
            ③ 重新查看，看是否删除成功

    2）集合的创建/删除
        创建集合
            db.createCollection(name, options)
                name: 要创建的集合名称
                options: 可选参数, 指定有关内存大小及索引的选项，可选参数如下
                capped：布尔（可选）/如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档
                    当该值为 true 时，必须指定 size 参数。
                autoIndexId：布尔（可选）/如为 true，自动在 _id 字段创建索引。默认为 false。
                size：数值（可选）/为固定集合指定一个最大值（以字节计）。如果 capped 为 true，也需要指定该字段。
                max：数值（可选）/指定固定集合中包含文档的最大数量。
            在 MongoDB 中，你不需要创建集合，当你插入一些文档时，MongoDB 会自动创建集合
        查看已有集合
            show collections 或 show tables
        删除集合
            db.collection.drop()
            如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false
    3）文档操作
    插入文档
        db.COLLECTION_NAME.insert(document)
    查看已插入文档
        db.COLLECTION_NAME.find()
        db.COLLECTION_NAME.find().pretty()
            格式化的方式来显示所有文档

    删除文档
        db.collection.remove( <query>, <justOne> )
            query :（可选）删除的文档的条件
            justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。
            writeConcern :（可选）抛出异常的级别

3、如何通过python使用MongoDB
    1）核心工具包：pymongo
        python通过pymongo来连接mongo
    2）pymongo安装
        命令提示符中安装：pip install pymongo
        查看安装版本：pip show pymongo
    3）创建MongoClient对象，连接mongo
        创建对象
            myclient = pymongo.MongoClient("mongodb://localhost:27017/")
        查看现有数据库
            list_database_names()
        读取数据库
            db = myclient[数据库名]
    4）查询集合、文档
        查看现有集合
            db.list_collection_names()
        读取集合
            data = db[集合名]
        查询文档
            查询单条数据： find_one() → 输出字典
            查询所有数据： find({}) → 输出可迭代对象<class 'pymongo.cursor.Cursor'>
    5）插入文档
        插入单个文档：insert_one()
        插入多个文档：insert_many() → 通过字典列表插入

    6）删除集合、文档
        删除文档
            删除一个文档：delete_one()
            删除多个文档：delete_many()
            如果传入的是一个空的查询对象，则会删除集合中的所有文档
        删除集合
            drop()

    7）pandas如何配合mongo：
        ① 通过查询的方式，将数据存成dataframe
        ② dataframe通过.to_dict()方法输出字典列表，再通过insert_many()导入数据库
            DataFrame.to_dict(orient='')，orient参数如下，这里建议用'records'
                ‘dict’ (default) : dict like {column -> {index -> value}}
                ‘list’ : dict like {column -> [values]}
                ‘series’ : dict like {column -> Series(values)}
                ‘split’ : dict like {‘index’ -> [index], ‘columns’ -> [columns], ‘data’ -> [values]}
                ‘records’ : list like [{column -> value}, … , {column -> value}]
                ‘index’ : dict like {index -> {column -> value}}
        ③ 数据修改、处理、分析，都在pandas中执行
        ④ 数据爬取过程中，以字典方式存储每一条数据，可以直接通过insert_one()插入数据库中









